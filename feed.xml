<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://danilenko.org/</id>
  <title>Danilenko.org</title>
  <updated>2012-07-05T20:00:00Z</updated>
  <link rel="alternate" href="http://danilenko.org/"/>
  <link rel="self" href="http://danilenko.org/feed.xml"/>
  <author>
    <name>Alexander Danilenko</name>
    <uri>http://danilenko.org</uri>
  </author>
  <entry>
    <id>tag:danilenko.org,2012-07-06:/2012/7/6/rails_timezones/</id>
    <title type="html">The Exhaustive Guide to Rails Time Zones</title>
    <published>2012-07-05T20:00:00Z</published>
    <updated>2012-07-05T20:00:00Z</updated>
    <link rel="alternate" href="http://danilenko.org/2012/7/6/rails_timezones/"/>
    <content type="html">&lt;p&gt;
  Ruby and Rails provide great tools for working with time and time zones.
  But my experience shows that Rails developers often pay little attention to how this magic really works,
  which often results in "ghost" problems that arise in particular configuration and time.
  The main gotcha for developer is that you can use "wrong" methods in development and fairly often
  get valid results. But then you'll face with unexpected problems on production.
&lt;/p&gt;
&lt;p&gt;
  Historically Ruby provides two classes to manage time:
  &lt;code class="well"&gt;&lt;a href="http://www.ruby-doc.org/core-1.9.3/Time.html"&gt;Time&lt;/a&gt;&lt;/code&gt;
and
&lt;code class="well"&gt;&lt;a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/date/rdoc/DateTime.html"&gt;DateTime&lt;/a&gt;&lt;/code&gt;.
  They use different approaches internally, which caused
  &lt;a href="http://stackoverflow.com/questions/1261329/whats-the-difference-between-datetime-and-time-in-ruby"&gt;different abilities and performance for them&lt;/a&gt;.
  But with Ruby 1.9.3 these differences seem to be vanished and you are free to choose whatever interface you like.
  But that's in Ruby! When it comes to Rails things get a bit more complicated.
&lt;/p&gt;
&lt;p&gt;
  Rails gives your ability to configure application time zone. It's as easy as
  &lt;code class="well"&gt;Time.zone = 'EST'&lt;/code&gt;.
  Setting
  &lt;code class="well"&gt;config.time_zone&lt;/code&gt;
  in your application.rb will eventually do the same. And this is the right thing to do since we
  don't want to depend on server time zone. But the problem here that now we have 3 (!) different
  time zones in our application: system time, application time and database time. And if you won't
  use correct methods to deal with time all them get mixed up.
&lt;/p&gt;
&lt;h2&gt;What's the trick?&lt;/h2&gt;
&lt;p&gt;
  Let me give you an example. Let's say you have server in Moscow (GMT+04:00), but most of your
  customers are from US and you use Eastern Standard Time (GMT-05:00) in your application.
  For database Rails by default converts all timestamps to GMT. Let's try calling different methods
  and compare the results.
&lt;/p&gt;
&lt;pre class="well"&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;
&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;
&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;
&lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;
&lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.zone = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;EST&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="constant"&gt;DateTime&lt;/span&gt;.now.to_s
&lt;span class="comment"&gt;# =&amp;gt; "2012-07-06T13:30:00+04:00"&lt;/span&gt;
&lt;span class="constant"&gt;Time&lt;/span&gt;.now.to_s
&lt;span class="comment"&gt;# =&amp;gt; "2012-07-06 13:30:00 +0400"&lt;/span&gt;
&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.now.to_s
&lt;span class="comment"&gt;# =&amp;gt; "2012-07-06 04:30:00 -0500"&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  You might notice that
  &lt;code class="well"&gt;DateTime.now&lt;/code&gt;
  and
  &lt;code class="well"&gt;Time.now&lt;/code&gt;
  both give you the time in system time zone. And it definitely makes sense since these are Ruby
  standard library methods that know nothing about Rails time zone configuration.
  &lt;code class="well"&gt;Time.zone.now&lt;/code&gt;
  on the contrary is provided by Rails and respects
  &lt;code class="well"&gt;Time.zone&lt;/code&gt;
  value that we set in Rails.
&lt;/p&gt;
&lt;p&gt;
  But you might argue that if we convert all these values to one time zone they will be the same.
  And you are right, if you try to save this time to ActiveRecord model or compare to another
  value you will get expected results. Then what's the problem? Let's try some manipulations with time.
&lt;/p&gt;
&lt;pre class="well"&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;
&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;
&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.zone = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;EST&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="constant"&gt;Time&lt;/span&gt;.now.end_of_day.to_s
&lt;span class="comment"&gt;# =&amp;gt; "2012-07-06 23:59:59 +0400"&lt;/span&gt;
&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.now.end_of_day.to_s
&lt;span class="comment"&gt;# =&amp;gt; "2012-07-06 23:59:59 -0500"&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Whoops, by using different time zones in initial time we got completely different results.
  That means that before we manipulate time we either need to explicitly convert time to
  required time zone or initially get time in correct time zone. Like this:
&lt;/p&gt;
&lt;pre class="well"&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;
&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;
&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.zone = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;EST&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="constant"&gt;Time&lt;/span&gt;.now.in_time_zone.end_of_day.to_s
&lt;span class="comment"&gt;# =&amp;gt; "2012-07-06 23:59:59 -0500"&lt;/span&gt;
&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.now.end_of_day.to_s
&lt;span class="comment"&gt;# =&amp;gt; "2012-07-06 23:59:59 -0500"&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Here is another trick. Let's time travel to the next morning. What have we got here?
&lt;/p&gt;
&lt;pre class="well"&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;
&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;
&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;
&lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;
&lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.zone = &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;EST&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="constant"&gt;Time&lt;/span&gt;.now.to_s
&lt;span class="comment"&gt;# =&amp;gt; "2012-07-07 06:30:00 +0400"&lt;/span&gt;
&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.now.to_s
&lt;span class="comment"&gt;# =&amp;gt; "2012-07-06 21:30:00 -0500"&lt;/span&gt;
&lt;span class="constant"&gt;Date&lt;/span&gt;.today
&lt;span class="comment"&gt;# =&amp;gt; "Fri, 07 Jul 2012"&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  But wait, application should still find itself in 6th of July since it uses EST time zone.
  As you might have guessed,
  &lt;code class="well"&gt;Date.today&lt;/code&gt;
  doesn't know anything about Rails time zone too and uses system time to determine current date.
&lt;/p&gt;
&lt;p&gt;
  So, when we know some troubles it might cause, let's find out which methods are safe to use.
&lt;/p&gt;
&lt;h2&gt;The Right Way to Go&lt;/h2&gt;
&lt;p&gt;
  You might have noticed from given examples that interesting construct
  &lt;code class="well"&gt;Time.zone&lt;/code&gt;
  that seem to produce correct results.
  So, what is it? Actually above I cheated for simplicity of introduction. It's not Rails responsible
  for adding time zone, but ActiveSupport. It adds
  &lt;code class="well"&gt;&lt;a href="http://api.rubyonrails.org/classes/Time.html#method-c-zone-3D"&gt;Time.zone=&lt;/a&gt;&lt;/code&gt;
  and
  &lt;code class="well"&gt;&lt;a href="http://api.rubyonrails.org/classes/Time.html#method-c-zone"&gt;Time.zone&lt;/a&gt;&lt;/code&gt;
  methods to correspondingly set and get current time zone. If you look into source of these methods
  you'll find that the first one finds requested
  &lt;code class="well"&gt;&lt;a href="http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html"&gt;ActiveSupport::TimeZone&lt;/a&gt;&lt;/code&gt;
  object and stores it in the current thread, while the second one just fetches if from there.
&lt;/p&gt;
&lt;p&gt;
  So, it's
  &lt;code class="well"&gt;ActiveSupport::TimeZone&lt;/code&gt;
  object where all the magic happens.
  It defines number of methods that makes its API similar to the one of
  &lt;code class="well"&gt;Time&lt;/code&gt;
  class. That's why from the user point of view it looks like a simple switch from
  &lt;code class="well"&gt;Time.now&lt;/code&gt;
  to
  &lt;code class="well"&gt;Time.zone.now&lt;/code&gt;.
  But what actually happens in
  &lt;code class="well"&gt;Time.zone.now&lt;/code&gt;
  method?
  Turns out it simply grabs current time and converts it do current time zone (which is
  &lt;code class="well"&gt;self&lt;/code&gt;).
&lt;/p&gt;
&lt;pre class="well"&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;
&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;
&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;ActiveSupport::TimeZone&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;now&lt;/span&gt;
    &lt;span class="constant"&gt;Time&lt;/span&gt;.now.utc.in_time_zone(&lt;span class="predefined-constant"&gt;self&lt;/span&gt;)
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  And here is the last line of defense,
  &lt;code class="well"&gt;in_time_zone&lt;/code&gt;
  method. It is added by ActiveSupport to both
  &lt;code class="well"&gt;&lt;a href="http://api.rubyonrails.org/classes/Time.html#method-i-in_time_zone"&gt;Time&lt;/a&gt;&lt;/code&gt;
  and
  &lt;code class="well"&gt;&lt;a href="http://api.rubyonrails.org/classes/DateTime.html#method-i-in_time_zone"&gt;DateTime&lt;/a&gt;&lt;/code&gt;
  Ruby standard library methods. In both cases it does the same - converts time to
  &lt;code class="well"&gt;&lt;a href="http://api.rubyonrails.org/classes/ActiveSupport/TimeWithZone.html"&gt;ActiveSupport::TimeWithZone&lt;/a&gt;&lt;/code&gt;
  object passing specified time zone to it. This class behaves exactly like Ruby
  &lt;code class="well"&gt;Time&lt;/code&gt;
  object, it even redefines class name. So you can manipulate it as you usually do in Ruby.
&lt;/p&gt;
&lt;p&gt;
  Now when we know what's under the hood, I will leave you with brief cheat sheet on correct and incorrect
  methods for dealing with time in Ruby on Rails.
&lt;/p&gt;
&lt;h3&gt;Get Current Time&lt;/h3&gt;
&lt;pre class="well nolines"&gt;&lt;span class="label label-success"&gt;Correct&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.now&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-warning"&gt;Acceptable&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.now.in_time_zone
&lt;span class="constant"&gt;DateTime&lt;/span&gt;.now.in_time_zone&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-important"&gt;Wrong&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.now
&lt;span class="constant"&gt;DateTime&lt;/span&gt;.now&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  You should now understand that wrong option will give you time in system time zone, which
  might cause problems. Second (acceptable) option will work fine as it converts time to Rails
  time zone. As we have seen above it is exactly what ActiveSupport is doing internally,
  but there is no need to use it explicitly as there is shorter and more clear option.
&lt;/p&gt;
&lt;h3&gt;Get Day (Today, Yesterday, etc.)&lt;/h3&gt;
&lt;pre class="well nolines"&gt;&lt;span class="label label-success"&gt;Correct&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.today
&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.today - &lt;span class="integer"&gt;1&lt;/span&gt;.day&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-warning"&gt;Acceptable&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Date&lt;/span&gt;.current
&lt;span class="constant"&gt;Date&lt;/span&gt;.yesterday&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-important"&gt;Wrong&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Date&lt;/span&gt;.today&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  ActiveSupport defines
  &lt;code class="well"&gt;Date.current&lt;/code&gt;
  method that proxies call to
  &lt;code class="well"&gt;Time.zone.today&lt;/code&gt;
  and it also redefines
  &lt;code class="well"&gt;Date.yesterday&lt;/code&gt;
  and
  &lt;code class="well"&gt;Date.tomorrow&lt;/code&gt;
  helpers. But I personally find them quite confusing and easier to be replaced with
  &lt;code class="well"&gt;Date.today&lt;/code&gt;
  by mistake. So I prefer to use explicit version, but feel free to disagree here.
&lt;/p&gt;
&lt;h3&gt;Build Time&lt;/h3&gt;
&lt;pre class="well nolines"&gt;&lt;span class="label label-success"&gt;Correct&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.local(&lt;span class="integer"&gt;2012&lt;/span&gt;, &lt;span class="integer"&gt;6&lt;/span&gt;, &lt;span class="integer"&gt;10&lt;/span&gt;, &lt;span class="integer"&gt;12&lt;/span&gt;, &lt;span class="integer"&gt;00&lt;/span&gt;)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-important"&gt;Wrong&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.new(&lt;span class="integer"&gt;2012&lt;/span&gt;, &lt;span class="integer"&gt;6&lt;/span&gt;, &lt;span class="integer"&gt;10&lt;/span&gt;, &lt;span class="integer"&gt;12&lt;/span&gt;, &lt;span class="integer"&gt;00&lt;/span&gt;)
&lt;span class="constant"&gt;DateTime&lt;/span&gt;.new(&lt;span class="integer"&gt;2012&lt;/span&gt;, &lt;span class="integer"&gt;6&lt;/span&gt;, &lt;span class="integer"&gt;10&lt;/span&gt;, &lt;span class="integer"&gt;12&lt;/span&gt;, &lt;span class="integer"&gt;00&lt;/span&gt;)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  I believe this one doesn't need any comments as Ruby classes are simply not aware of the time zone in use.
&lt;/p&gt;
&lt;h3&gt;Time From Timestamp&lt;/h3&gt;
&lt;pre class="well nolines"&gt;&lt;span class="label label-success"&gt;Correct&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.at(timestamp)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-warning"&gt;Acceptable&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.at(timestamp).in_time_zone&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-important"&gt;Wrong&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.at(timestamp)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Parse Time (Simple)&lt;/h3&gt;
&lt;pre class="well nolines"&gt;&lt;span class="label label-success"&gt;Correct&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.parse(str)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-important"&gt;Wrong&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.parse(str)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Parse Time (With Explicit Format)&lt;/h3&gt;
&lt;pre class="well nolines"&gt;&lt;span class="label label-warning"&gt;Acceptable&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;DateTime&lt;/span&gt;.strptime(str, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;%Y-%m-%d %H:%M %Z&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;).in_time_zone&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-important"&gt;Wrong&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;DateTime&lt;/span&gt;.strptime(str, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;%Y-%m-%d %H:%M&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Here I have to make one important note. Correct option will give valid results only when time
  string (and format of course) explicitly include time zone (note %Z in format string).
  But there are cases when you need to parse time without specified time zone. In this case you
  usually need to treat this time in current time zone. Unfortunately ActiveSupport doesn't
  provide convenient means for this. To fill this gap you can use my micro gem
  &lt;a href="https://github.com/doz/time_zone_ext"&gt;TimeZoneExt&lt;/a&gt;
  that allows you to parse time with or without explicitly specified time zone.
  This adds one more correct option.
&lt;/p&gt;
&lt;pre class="well nolines"&gt;&lt;span class="label label-success"&gt;Correct&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.zone.strptime(str, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;%Y-%m-%d %H:%M&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Get Time For Date&lt;/h3&gt;
&lt;pre class="well nolines"&gt;&lt;span class="label label-success"&gt;Correct&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;date.beginning_of_day&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-warning"&gt;Acceptable&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;date.to_time_in_current_zone&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;span class="label label-important"&gt;Wrong&lt;/span&gt;&lt;code class="language-ruby"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;date.to_time&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Again, default
  &lt;code class="well"&gt;to_time&lt;/code&gt;
  method provided by Ruby knows nothing about time zone in use. So you should use one of the
  methods defined in ActiveSupport. I personally find
  &lt;code class="well"&gt;beginning_of_day&lt;/code&gt;
  more explicit, although
  &lt;code class="well"&gt;to_time_in_current_zone&lt;/code&gt;
  gives the same result.
&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
  There is no rocket science in dealing with time in Rails. But it's a good idea to understand it once
  and always keep in mind that when you build time or date object you should respect current time zone.
  In most cases it simply means to use
  &lt;code class="well"&gt;Time.zone&lt;/code&gt;
  instead of
  &lt;code class="well"&gt;Time&lt;/code&gt;,
  &lt;code class="well"&gt;Date&lt;/code&gt;
  or
  &lt;code class="well"&gt;DateTime&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  I do not cover dealing with other than default time zones in Rails. This post has another purpose.
  But it is possible and quite easy to do. And now you have references to classes to look into.
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;/p&gt;&lt;center&gt;
    &lt;i&gt;
      For more high-quality posts check out
      &lt;a href="http://www.toptal.com/blog"&gt;blog at toptal.com&lt;/a&gt;
    &lt;/i&gt;
  &lt;/center&gt;

</content>
  </entry>
</feed>
